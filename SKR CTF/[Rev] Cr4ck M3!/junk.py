from z3 import *
import string

s = Solver()
F = [BitVec(i, 8) for i in range(24)]
coeff = [0x0] * 24

arrCOF = [0x6f, 0x23, 0x60, 0x73, 0xfffd, 0x2a, 0xff8e, 0xfff4, 0x1b, 0x19, 0xff93, 0xffff, 0xffa5, 0x55, 0x7f, 0x2, 0xf, 0xffa3, 0xe, 0xff82, 0xffe7, 0xffa6, 0xffaa, 0x45, 0xffcc, 0x68, 0xffac, 0xffd8, 0x9, 0xf, 0xffea, 0x78, 0xff9e, 0x46, 0xffee, 0x55, 0x19, 0xff93, 0xffbe, 0xffd6, 0xffac, 0xffa8, 0x48, 0x18, 0x2c, 0x2d, 0xff99, 0x37, 0x3e, 0xffd5, 0xffd2, 0x3c, 0x4c, 0x47, 0xff94, 0xffa7, 0x17, 0xffdb, 0x45, 0xff81, 0xffe1, 0x11, 0xffaf, 0x8, 0xff83, 0x50, 0xffc4, 0xffe1, 0xffae, 0xfffd, 0x6d, 0x74, 0xffaa, 0x1f, 0x65, 0xff83, 0xffe8, 0xff8b, 0xffce, 0x70, 0xffdd, 0x1f, 0x1c, 0xff9e, 0x15, 0x11, 0x37, 0xff91, 0x59, 0xffc0, 0xffad, 0x77, 0x39, 0xffd9, 0xffbe, 0xff91, 0x7d, 0x1b, 0xffb5, 0x6c, 0x6d, 0xffa0, 0xffda, 0x39, 0xffd0, 0xfff7, 0x7d, 0xff91, 0xffb9, 0xffaf, 0xffad, 0xffd6, 0xff9f, 0xffb8, 0x71, 0xffff, 0x76, 0xffc1, 0xfffc, 0x52, 0x56, 0xffca, 0xffd1, 0xffa6, 0xffec, 0xff85, 0x6c, 0x62, 0x4a, 0x2f, 0x28, 0xffa6, 0xffab, 0xff96, 0x78, 0x67, 0x57, 0x1d, 0xffcb, 0x69, 0xffb9, 0xffd9, 0xfff7, 0x4, 0xff8a, 0xffa5, 0x2e, 0xffa7, 0x1, 0x30, 0x3, 0xfffc, 0xffaa, 0x24, 0xe, 0xffde, 0x6a, 0x6d, 0xffe6, 0x37, 0xffc8, 0x43, 0x41, 0xffe9, 0x3f, 0xff86, 0xffe8, 0xffd8, 0xfff6, 0xff9b, 0x47, 0xff8d, 0x24, 0xffca, 0x6f, 0xff9b, 0xffcc, 0xffda, 0xffcc, 0xffec, 0xffdc, 0x18, 0xffba, 0x40, 0x7b, 0x5f, 0x39, 0x2a, 0x61, 0x6b, 0x52, 0xff8c, 0xff9e, 0x45, 0xa, 0xf, 0xffaf, 0xffe0, 0xffe3, 0xffdf, 0xffe5, 0x7a, 0xff82, 0x7f, 0xfffb, 0xfffb, 0xffed, 0xffb5, 0x71, 0xff81, 0x1b, 0xff97, 0xff8f, 0xc, 0x66, 0x5e, 0x7a, 0xfff3, 0xfff3, 0xe, 0xffdb, 0x5b, 0xfffc, 0x68, 0xff9d, 0x67, 0x66, 0xff86, 0x1b, 0xffbb, 0x6d, 0x6, 0xff91, 0x52, 0x5b, 0xffe9, 0x6, 0xffc3, 0xffed, 0x11, 0xff86, 0x11, 0x20, 0x64, 0xffe1, 0xffd3, 0x59, 0x2d, 0x41, 0xff9a, 0xffca, 0xffcf, 0x7f, 0x1c, 0xfff8, 0xc, 0x5e, 0xffe3, 0x68, 0x28, 0xff8b, 0xffc0, 0xffbd, 0x55, 0x60, 0xffc8, 0xffa4, 0x3c, 0xfffe, 0x5e, 0x19, 0x59, 0xffd3, 0x41, 0xffb6, 0xff83, 0x3f, 0x3b, 0xfff9, 0xffd6, 0x16, 0x71, 0x1c, 0xffe7, 0x50, 0x5b, 0xffa9, 0x43, 0xffaf, 0x36, 0x7d, 0xffbb, 0xff9d, 0xff91, 0xff9b, 0x6d, 0xffe8, 0xffb9, 0xa, 0x2f, 0xffec, 0x21, 0xff9b, 0x37, 0xff95, 0xff8f, 0xffea, 0xf, 0xd, 0x60, 0xffab, 0x7e, 0x68, 0xffb3, 0x4b, 0xffe6, 0x43, 0xe, 0xffd5, 0xffb4, 0xffa8, 0x1, 0x59, 0xffc7, 0xffa7, 0x2a, 0x30, 0xffdb, 0x11, 0x62, 0xffb1, 0x33, 0x32, 0xffe4, 0x41, 0x77, 0xffa1, 0x36, 0x13, 0xff9d, 0xffe9, 0x22, 0x43, 0xff91, 0xfff4, 0x10, 0xfff1, 0x9, 0xffa9, 0x7c, 0x2c, 0xffb1, 0xff90, 0x6f, 0xffcb, 0xffaa, 0x60, 0x74, 0x17, 0x4, 0x1a, 0xffd3, 0xffc8, 0x5, 0xffed, 0x13, 0x12, 0x1, 0x34, 0x1e, 0x3e, 0x7d, 0xff97, 0xff97, 0x55, 0x7d, 0xffb9, 0xfffb, 0x59, 0xffee, 0x75, 0x43, 0x28, 0xffa1, 0xff83, 0xffb0, 0xff8f, 0x37, 0x42, 0xffe7, 0xfffd, 0xffa5, 0x2b, 0x47, 0xffd0, 0x7a, 0xff9a, 0xffaa, 0xfff6, 0x5a, 0xffa2, 0xfff3, 0x35, 0x76, 0x29, 0x2, 0x51, 0xffa2, 0xffb0, 0x67, 0xffed, 0x23, 0x46, 0x6a, 0x63, 0xff8f, 0x6b, 0x3c, 0x63, 0xffd8, 0xffc9, 0xfffa, 0x3e, 0xffd6, 0x60, 0xffea, 0xff88, 0x1, 0x38, 0xfff0, 0xffff, 0xfff9, 0xffde, 0xffeb, 0xff87, 0xfffd, 0x17, 0x14, 0xffc2, 0x25, 0xffde, 0x3c, 0x4, 0x39, 0x2b, 0x34, 0x77, 0x3b, 0xff89, 0x4b, 0x50, 0xfff6, 0x2f, 0xff87, 0x8, 0x72, 0xff9a, 0xffd6, 0xff94, 0xffa2, 0xd, 0xa, 0xffd6, 0xffd2, 0x55, 0xffd7, 0xffae, 0x6, 0xffd0, 0xc, 0x2f, 0x69, 0xff93, 0x56, 0x53, 0x6b, 0xffbc, 0xffed, 0x59, 0x35, 0x2a, 0xff99, 0xff81, 0x5, 0xd, 0x4a, 0xffff, 0x62, 0xff8a, 0xfff5, 0xffdd, 0xffa8, 0x21, 0x19, 0x1d, 0xffb7, 0x4a, 0xffb4, 0xff9e, 0xff9a, 0x63, 0x47, 0x49, 0x3b, 0xffcc, 0x73, 0x6a, 0xffca, 0xffa3, 0xff9d, 0x55, 0x50, 0x6f, 0xffda, 0x36, 0x45, 0xffd6, 0xffe5, 0xffda, 0x5e, 0x4d, 0x56, 0x20, 0xfffb, 0x10, 0x64, 0xff88, 0xffb0, 0xff90, 0x4a, 0x6b, 0xffe3, 0x25, 0x30, 0xffb9, 0xffb3, 0x7a, 0xff86, 0x30, 0x24, 0xffe2, 0xff8e, 0x1f, 0xffa5, 0xff9d, 0xfff5, 0x75, 0xffdb, 0xffa7, 0xffc4, 0xffdf, 0x71, 0x12, 0xfffb, 0x3f, 0x19, 0xff90, 0x34, 0x65, 0x3f, 0xff9c, 0x1e, 0xffef, 0xff94, 0x17, 0x2b, 0x1b, 0x20, 0x6, 0x63, 0xffe6, 0xffb9, 0xffb1, 0xffcf, 0xffb4, 0xff90]
arrSUM = [0x1260, 0xd6c3, 0x9964, 0xb7a5, 0x1651, 0x339b, 0xdaba, 0x4a79, 0xf95e, 0x5416, 0x3f48, 0x7ea1, 0x9fad, 0x7ae6, 0xe992, 0x6e08, 0xf085, 0x74f1, 0x66f7, 0xcf22, 0xf3c6, 0x4e0c, 0x9676, 0x9806]

for c in F:
    s.add(Or([c == ord(char) for char in string.printable[:-6]]))

s.add(F[0] == ord('S'))
s.add(F[1] == ord('K'))
s.add(F[2] == ord('R'))
s.add(F[3] == ord('{'))
s.add(F[23] == ord('}'))

s.add((0x6f * F[0] + 0x23 * F[1] + 0x60 * F[2] + 0x73 * F[3] + 0xfffd * F[4] + 0x2a * F[5] + 0xff8e * F[6] + 0xfff4 * F[7] + 0x1b * F[8] + 0x19 * F[9] + 0xff93 * F[10] + 0xffff * F[11] + 0xffa5 * F[12] + 0x55 * F[13] + 0x7f * F[14] + 0x2 * F[15] + 0xf * F[16] + 0xffa3 * F[17] + 0xe * F[18] + 0xff82 * F[19] + 0xffe7 * F[20] + 0xffa6 * F[21] + 0xffaa * F[22] + 0x45 * F[23]) & 0xFFFF == 0x1260)

flag = ""
if s.check() == sat:
    solution = s.model()
    for i in range(24):
        flag += chr(int(str(solution[F[i]])))
    print(flag)
else:
    print("Error")

# i = 0
# for i in range(24):
#     print("s.add" + "((", end="")
#     for j in range(24):
#         coeff[j] += arrCOF[i * 24 + j]
#         if(j < 23):
#             print(hex(coeff[j]) + " * F[" + str(j) + "] +", end = ' ')
#         else:
#             print(hex(coeff[j]) + " * F[" + str(j) + "]) & 0xFFFF == " + hex(int(str(arrSUM[i]))) + ")")

#arrCOF = [0x6f, 0x23, 0x60, 0x73, 0xfd, 0x2a, 0x8e, 0xf4, 0x1b, 0x19, 0x93, 0xff, 0xa5, 0x55, 0x7f, 0x02, 0x0f, 0xa3, 0x0e, 0x82, 0xe7, 0xa6, 0xaa, 0x45, 0xcc, 0x68, 0xac, 0xd8, 0x09, 0x0f, 0xea, 0x78, 0x9e, 0x46, 0xee, 0x55, 0x19, 0x93, 0xbe, 0xd6, 0xac, 0xa8, 0x48, 0x18, 0x2c, 0x2d, 0x99, 0x37, 0x3e, 0xd5, 0xd2, 0x3c, 0x4c, 0x47, 0x94, 0xa7, 0x17, 0xdb, 0x45, 0x81, 0xe1, 0x11, 0xaf, 0x08, 0x83, 0x50, 0xc4, 0xe1, 0xae, 0xfd, 0x6d, 0x74, 0xaa, 0x1f, 0x65, 0x83, 0xe8, 0x8b, 0xce, 0x70, 0xdd, 0x1f, 0x1c, 0x9e, 0x15, 0x11, 0x37, 0x91, 0x59, 0xc0, 0xad, 0x77, 0x39, 0xd9, 0xbe, 0x91, 0x7d, 0x1b, 0xb5, 0x6c, 0x6d, 0xa0, 0xda, 0x39, 0xd0, 0xf7, 0x7d, 0x91, 0xb9, 0xaf, 0xad, 0xd6, 0x9f, 0xb8, 0x71, 0xff, 0x76, 0xc1, 0xfc, 0x52, 0x56, 0xca, 0xd1, 0xa6, 0xec, 0x85, 0x6c, 0x62, 0x4a, 0x2f, 0x28, 0xa6, 0xab, 0x96, 0x78, 0x67, 0x57, 0x1d, 0xcb, 0x69, 0xb9, 0xd9, 0xf7, 0x04, 0x8a, 0xa5, 0x2e, 0xa7, 0x01, 0x30, 0x03, 0xfc, 0xaa, 0x24, 0x0e, 0xde, 0x6a, 0x6d, 0xe6, 0x37, 0xc8, 0x43, 0x41, 0xe9, 0x3f, 0x86, 0xe8, 0xd8, 0xf6, 0x9b, 0x47, 0x8d, 0x24, 0xca, 0x6f, 0x9b, 0xcc, 0xda, 0xcc, 0xec, 0xdc, 0x18, 0xba, 0x40, 0x7b, 0x5f, 0x39, 0x2a, 0x61, 0x6b, 0x52, 0x8c, 0x9e, 0x45, 0x0a, 0x0f, 0xaf, 0xe0, 0xe3, 0xdf, 0xe5, 0x7a, 0x82, 0x7f, 0xfb, 0xfb, 0xed, 0xb5, 0x71, 0x81, 0x1b, 0x97, 0x8f, 0x0c, 0x66, 0x5e, 0x7a, 0xf3, 0xf3, 0x0e, 0xdb, 0x5b, 0xfc, 0x68, 0x9d, 0x67, 0x66, 0x86, 0x1b, 0xbb, 0x6d, 0x06, 0x91, 0x52, 0x5b, 0xe9, 0x06, 0xc3, 0xed, 0x11, 0x86, 0x11, 0x20, 0x64, 0xe1, 0xd3, 0x59, 0x2d, 0x41, 0x9a, 0xca, 0xcf, 0x7f, 0x1c, 0xf8, 0x0c, 0x5e, 0xe3, 0x68, 0x28, 0x8b, 0xc0, 0xbd, 0x55, 0x60, 0xc8, 0xa4, 0x3c, 0xfe, 0x5e, 0x19, 0x59, 0xd3, 0x41, 0xb6, 0x83, 0x3f, 0x3b, 0xf9, 0xd6, 0x16, 0x71, 0x1c, 0xe7, 0x50, 0x5b, 0xa9, 0x43, 0xaf, 0x36, 0x7d, 0xbb, 0x9d, 0x91, 0x9b, 0x6d, 0xe8, 0xb9, 0x0a, 0x2f, 0xec, 0x21, 0x9b, 0x37, 0x95, 0x8f, 0xea, 0x0f, 0x0d, 0x60, 0xab, 0x7e, 0x68, 0xb3, 0x4b, 0xe6, 0x43, 0x0e, 0xd5, 0xb4, 0xa8, 0x01, 0x59, 0xc7, 0xa7, 0x2a, 0x30, 0xdb, 0x11, 0x62, 0xb1, 0x33, 0x32, 0xe4, 0x41, 0x77, 0xa1, 0x36, 0x13, 0x9d, 0xe9, 0x22, 0x43, 0x91, 0xf4, 0x10, 0xf1, 0x09, 0xa9, 0x7c, 0x2c, 0xb1, 0x90, 0x6f, 0xcb, 0xaa, 0x60, 0x74, 0x17, 0x04, 0x1a, 0xd3, 0xc8, 0x05, 0xed, 0x13, 0x12, 0x01, 0x34, 0x1e, 0x3e, 0x7d, 0x97, 0x97, 0x55, 0x7d, 0xb9, 0xfb, 0x59, 0xee, 0x75, 0x43, 0x28, 0xa1, 0x83, 0xb0, 0x8f, 0x37, 0x42, 0xe7, 0xfd, 0xa5, 0x2b, 0x47, 0xd0, 0x7a, 0x9a, 0xaa, 0xf6, 0x5a, 0xa2, 0xf3, 0x35, 0x76, 0x29, 0x02, 0x51, 0xa2, 0xb0, 0x67, 0xed, 0x23, 0x46, 0x6a, 0x63, 0x8f, 0x6b, 0x3c, 0x63, 0xd8, 0xc9, 0xfa, 0x3e, 0xd6, 0x60, 0xea, 0x88, 0x01, 0x38, 0xf0, 0xff, 0xf9, 0xde, 0xeb, 0x87, 0xfd, 0x17, 0x14, 0xc2, 0x25, 0xde, 0x3c, 0x04, 0x39, 0x2b, 0x34, 0x77, 0x3b, 0x89, 0x4b, 0x50, 0xf6, 0x2f, 0x87, 0x08, 0x72, 0x9a, 0xd6, 0x94, 0xa2, 0x0d, 0x0a, 0xd6, 0xd2, 0x55, 0xd7, 0xae, 0x06, 0xd0, 0x0c, 0x2f, 0x69, 0x93, 0x56, 0x53, 0x6b, 0xbc, 0xed, 0x59, 0x35, 0x2a, 0x99, 0x81, 0x05, 0x0d, 0x4a, 0xff, 0x62, 0x8a, 0xf5, 0xdd, 0xa8, 0x21, 0x19, 0x1d, 0xb7, 0x4a, 0xb4, 0x9e, 0x9a, 0x63, 0x47, 0x49, 0x3b, 0xcc, 0x73, 0x6a, 0xca, 0xa3, 0x9d, 0x55, 0x50, 0x6f, 0xda, 0x36, 0x45, 0xd6, 0xe5, 0xda, 0x5e, 0x4d, 0x56, 0x20, 0xfb, 0x10, 0x64, 0x88, 0xb0, 0x90, 0x4a, 0x6b, 0xe3, 0x25, 0x30, 0xb9, 0xb3, 0x7a, 0x86, 0x30, 0x24, 0xe2, 0x8e, 0x1f, 0xa5, 0x9d, 0xf5, 0x75, 0xdb, 0xa7, 0xc4, 0xdf, 0x71, 0x12, 0xfb, 0x3f, 0x19, 0x90, 0x34, 0x65, 0x3f, 0x9c, 0x1e, 0xef, 0x94, 0x17, 0x2b, 0x1b, 0x20, 0x06, 0x63, 0xe6, 0xb9, 0xb1, 0xcf, 0xb4, 0x90]